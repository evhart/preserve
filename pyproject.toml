[tool.poetry]
include = [
  { path = "README.md", format = "sdist" },
  { path = "pyproject.toml", format = "sdist" },
  { path = "LICENSE", format = "sdist" },
]
authors = ["Gr√©goire Burel <evhart@users.noreply.github.com>"]
classifiers = [
  "Development Status :: 3 - Alpha",
  "Intended Audience :: Developers",
  "Intended Audience :: System Administrators",
  "License :: OSI Approved :: MIT License",
  "Topic :: Database",
  "Topic :: Database :: Database Engines/Servers",
  "Topic :: Utilities",
  "Programming Language :: Python :: 3",
  "Programming Language :: Python :: 3.9",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
  "Programming Language :: Python :: 3.13",
  "Programming Language :: Python",
  "Programming Language :: Python :: Implementation :: PyPy",
  "Operating System :: OS Independent",
]
description = "A simple key/value store with multiple backends."
homepage = "https://github.com/evhart/preserve/"
license = "MIT"
name = "preserve"
readme = "README.md"
repository = "https://github.com/evhart/preserve/"
version = "0.2.0"


[tool.poetry.dependencies]
halo = "^0.0.30"
pydantic = "^2.0.0"
pymongo = "^3.11.0"
python = "^3.9"
tabulate = "^0.8.7"
toml = "^0.10.1"
typer = "^0.4.0"
usingversion = "^0.1.2"

setuptools = "^75.8.0"
[tool.poetry.group.dev.dependencies]
python-semantic-release = "^9.12.0"
ruff = "^0.7.0"
pre-commit = "^4.0.1"


[tool.poetry.scripts]
preserve = "preserve.cli:app"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.semantic_release]
version_toml = ["pyproject.toml:tool.poetry.version"]
branch = "main"
upload_to_PyPI = false
upload_to_release = true
build_command = "pip install poetry && poetry build"
commit_author = "github-actions[bot] <41898282+github-actions[bot]@users.noreply.github.com>"

[tool.semantic_release.commit_parser_options]
allowed_tags = [
  "build",
  "chore",
  "ci",
  "docs",
  "feat",
  "fix",
  "perf",
  "style",
  "refactor",
  "test",
]
minor_tags = ["feat"]
patch_tags = ["fix", "perf"]

[tool.ruff]
line-length = 120

[tool.ruff.lint]
select = [
  "E",  # pycodestyle errors
  "W",  # pycodestyle warnings
  "F",  # pyflakes
  "I",  # isort
  "B",  # flake8-bugbear
  "C4", # flake8-comprehensions
  "N",  # PEP8 naming convetions
  "D",  # pydocstyle
]
ignore = [
  "C901", # too complex
  "W191", # indentation contains tabs
  "D401", # imperative mood
  "D107", # TODO remove docstring warning.
  "D104", # TODO remove docstring warning.
  "D103", # TODO remove docstring warning.
  "D102", # TODO remove docstring warning.
  "D101", # TODO remove docstring warning.
  "D100", # TODO remove docstring warning.
  "D105", # TODO remove docstring warning.
]
